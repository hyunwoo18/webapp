import React, { Component } from 'react';
import { Button, Grid, Row, Col } from 'react-bootstrap';
import fire from './fire';
import Header from './Header';
class MainContainer extends Component {
    state = { user: null, hkname:'',   hkcurrent:'',   resumebool: false,     
	      name_editing: false, current_editing:false, past_editing:false,
	      hkinputs: [ {period:null, title:null, description:null} ],           name:'',company:'' };
    componentDidMount() {
        fire.auth().onAuthStateChanged(  user => {
                if (user) {
		    console.log( user.uid );
		    this.setState( { user }  );

		    fire.database().ref(  'users/' + user.uid  ).on('value', snapshot => {
			    if ( snapshot.val() ) {
				this.setState( { resumebool: true } );
				this.setState( { hkname: snapshot.val().name } );
				this.setState( { hkcurrent: snapshot.val().current } );
				this.setState( { hkinputs: snapshot.val().past } );
				console.log( "there is resume" );
				console.log( snapshot.val() );
			    } else { console.log( "no resume" ); }
			});
		} else {
		    console.log( "new user?" );
		    this.props.history.push('/login');
		}
	    } );
    };
    //////////////////////////
    handleLogout = () => {
	fire.auth().signOut();
    };

    //////////////////////////
    handleNameChange = event => {
	this.setState(  { hkname: event.target.value }  );
    };
    handleCurrentChange = event => {
	this.setState(  { hkcurrent: event.target.value }  );
    };
    handleSubmit = event => {
	event.preventDefault();
	if ( this.state.hkname && this.state.hkcurrent ) {
	    this.fireSubmit();
	} else {
	    console.log( "error" );
	}
    };
    fireSubmit() {
        let uploadarray = [];

	this.state.hkinputs.map( (msg, id) => {
		// build each line consisting 3 fields
		let hktempobject = { period: this.refs[`period_${ id }`].value, 
		  title: this.refs[`title_${ id }`].value,  description: this.refs[`description_${ id }`].value };
		console.log( "constructed object" );
		console.log( hktempobject );
		uploadarray.push( hktempobject );
	    } );

	fire.database().ref(  'users/' + this.state.user.uid  ).set(  { name: this.state.hkname, current: this.state.hkcurrent,
		    past: uploadarray} );

    };
    //////////////////////////
    toggle_name_editing = () => {
	this.setState( { name_editing: true } );
    };
    toggle_current_editing = () => {
	this.setState( { current_editing: true } );
    };
    //handleNameField = (event) => {
    //if ( event.keyCode === 13 ) {
    //    console.log( "name field change requested by key" );
    //    fire.database().ref(  'users/' + this.state.user.uid  ).update(  { name: event.target.value }  );
    //}
    //};
    handleNameTotal = () => {
	console.log( "name field change requested by button" );
	fire.database().ref(  'users/' + this.state.user.uid  ).update(  { name: this.refs['name'].value }  );
	this.setState( { name_editing: false } );
    };
    handleCurrentTotal = () => {
	fire.database().ref(  'users/' + this.state.user.uid  ).update(  { current: this.refs['current'].value }  );
	this.setState( { current_editing: false } );
    };
    ////////////////////////////////
    render_name = () => {
	if ( this.state.name_editing ) {
	    return ( <div> <input type="text" name="name" defaultValue={ this.state.hkname } ref={ 'name'}  />  
		     <button className="red light" type="submit" onClick={this.handleNameTotal}>   Submit a change   </button> </div>  );
	} else {
	    return (   
<div onClick={this.toggle_name_editing}> 
<dt> Basic </dt>
<dd>
		    <Col sm={3}> Name: </Col>
		    <Col sm={3}> { this.state.hkname} </Col>
</dd>

</div>
      )
	}

    };
    ////////////////////////////////
    render_current = () => {
	if ( this.state.current_editing ) {
	    return ( <div> <input  type="text" name="current" defaultValue={ this.state.hkcurrent } ref={ 'current'}  />  
		     <button className="red light" type="submit" onClick={this.handleCurrentTotal}>   Submit a change   </button> </div>  );
	} else {
	    return (   
<div onClick={this.toggle_name_editing}> 
<Col sm={3}>  Current Position:  </Col> <Col sm={3}> {this.state.hkcurrent} </Col> 
</div>     )
	}

    };
    /////////////////////////////////////////////////////////////
    handleAdd = () => {
        let newarray = this.state.hkinputs.slice();
        newarray.push( 'third' )
        this.setState(  { hkinputs: newarray } );
    };

    handleDel = (param) => {
        console.log( param );
        console.log( this.state.hkinputs );
        let newarray2 = [...this.state.hkinputs];
        newarray2.splice( param, 1 );
        console.log( newarray2 );
        this.setState(  { hkinputs: newarray2 } );
    };

    /////////////////////////////////
    togglePastEditing = ( itemId ) => {
        this.setState( { past_editing: itemId } );
    };
    handlePastTotal = (id) => {
	console.log( "past change requested by button" );
	
	//	let hktempobject = { period: this.refs[`period_${ id }`].value, 
	//  title: this.refs[`title_${ id }`].value,  description: this.refs[`description_${ id }`].value };

	fire.database().ref(  'users/' + this.state.user.uid + '/past/' + id  ).update( { period: this.refs[`period2_${ id }`].value, 
		    title: this.refs[`title2_${ id }`].value,  description: this.refs[`description2_${ id }`].value } );
	this.setState( { past_editing: false } );
    };
    /////////////////////////////////
    renderItemOrEditField = ( item, id ) => {
        console.log( id );
       if ( this.state.past_editing === id ) {
 return(  <li key={ `editing-${ id }` }>
        <Grid>
        <Row>
 <Col> <input  type="text" className="form-control" ref={`period2_${ id }` } name="period" defaultValue={ item.period }  />        </Col>
 <Col> <input  type="text" className="form-control" ref={`title2_${ id }` } name="title" defaultValue={ item.title } />      </Col>
 <Col> <input  type="text" className="form-control" ref={`description2_${ id }`} name="description" defaultValue={item.description} /> </Col>
	  <Col> <Button onClick={ this.handlePastTotal.bind( null, id ) }> Update Item </Button>    </Col>
        </Row>
        </Grid> </li> )
     } else {
	   return ( <li onClick={ this.togglePastEditing.bind( null, id ) } key={ id } > { `Period: ${ item.period } Title: ${ item.title } (${ item.description })` } </li> )
        }
    };

    /////////////////////////////////
    render() {
	return (
<div id="UserContainer" className="inner-container">
  <Header>    <button className="red" onClick={this.handleLogout}>            Logout          </button>                </Header>

{ this.state.resumebool ?   ( 

<Grid>
<Row>


{this.render_name()}
</Row>

<Row>
{this.render_current()}
</Row>

<Row>
<ul>
{  this.state.hkinputs.map(   ( item, i ) => { return this.renderItemOrEditField( item, i ); } ) }
</ul>

</Row>
</Grid>


) : (

<div>
  <form onSubmit={this.handleSubmit}>

    <button className="red light" type="submit">   Submit your resume    </button>

     <input type="text" onChange={this.handleNameChange}    value={this.state.hkname}    placeholder="Your Name"          />
     <input type="text" onChange={this.handleCurrentChange} value={this.state.hkcurrent} placeholder="Your Current Position" />

  { this.state.hkinputs.map( (msg, id) => { return (
<div> 
<input type="text" ref={ `period_${ id }` }      placeholder="Period"/>
<input type="text" ref={ `title_${ id }` }       placeholder="Title"/>
<input type="text" ref={ `description_${ id }` } placeholder="Description"/>

<button type="button" onClick={ this.handleDel.bind( this, id ) }> Del </button> 
</div>) } ) }

                       </form>

			<button onClick={this.handleAdd}>
                        Add
                        </button>
</div>

	       )  }
            </div>
	);
    }
}

export default MainContainer;
